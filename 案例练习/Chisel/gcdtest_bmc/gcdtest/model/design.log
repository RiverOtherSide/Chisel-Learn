
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.35+24 (git sha1 7eea04779, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: gcdtest.sv
Parsing SystemVerilog input from `gcdtest.sv' to AST representation.
Storing AST representation for module `$abstract\gcd'.
Storing AST representation for module `$abstract\gcdtest'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ResetCounter.sv
Parsing SystemVerilog input from `ResetCounter.sv' to AST representation.
Storing AST representation for module `$abstract\ResetCounter'.
Successfully finished Verilog frontend.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\gcdtest'.
Generating RTLIL representation for module `\gcdtest'.

3.2.1. Analyzing design hierarchy..
Top module:  \gcdtest

3.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\gcd'.
Generating RTLIL representation for module `\gcd'.

3.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ResetCounter'.
Generating RTLIL representation for module `\ResetCounter'.

3.2.4. Analyzing design hierarchy..
Top module:  \gcdtest
Used module:     \gcd
Used module:         \ResetCounter

3.2.5. Analyzing design hierarchy..
Top module:  \gcdtest
Used module:     \gcd
Used module:         \ResetCounter
Removing unused module `$abstract\ResetCounter'.
Removing unused module `$abstract\gcdtest'.
Removing unused module `$abstract\gcd'.
Removed 3 unused modules.
Module gcd directly or indirectly contains formal properties -> setting "keep" attribute.
Module gcdtest directly or indirectly contains formal properties -> setting "keep" attribute.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `gcdtest.$proc$gcdtest.sv:189$17'.
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$ResetCounter.sv:19$109 in module ResetCounter.
Marked 4 switch rules as full_case in process $proc$gcdtest.sv:55$81 in module gcd.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\ResetCounter.$proc$ResetCounter.sv:0$111'.
  Set init value: \count = 0
  Set init value: \flag = 1'0
Found init rule in `\gcd.$proc$gcdtest.sv:0$107'.
  Set init value: $formal$gcdtest.sv:151$51_EN = 1'0
Found init rule in `\gcdtest.$proc$gcdtest.sv:0$47'.
  Set init value: $formal$gcdtest.sv:245$3_EN = 1'0
Found init rule in `\gcdtest.$proc$gcdtest.sv:0$45'.
  Set init value: $formal$gcdtest.sv:241$2_EN = 1'0
Found init rule in `\gcdtest.$proc$gcdtest.sv:0$43'.
  Set init value: $formal$gcdtest.sv:237$1_EN = 1'0
Found init rule in `\gcdtest.$proc$gcdtest.sv:0$49'.
  Set init value: $formal$gcdtest.sv:249$4_EN = 1'0

3.3.5. Executing PROC_ARST pass (detect async resets in processes).

3.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~19 debug messages>

3.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ResetCounter.$proc$ResetCounter.sv:0$111'.
Creating decoders for process `\ResetCounter.$proc$ResetCounter.sv:19$109'.
     1/2: $0\flag[0:0]
     2/2: $0\count[31:0]
Creating decoders for process `\gcd.$proc$gcdtest.sv:0$107'.
Creating decoders for process `\gcd.$proc$gcdtest.sv:149$101'.
     1/2: $0$formal$gcdtest.sv:151$51_EN[0:0]$103
     2/2: $0$formal$gcdtest.sv:151$51_CHECK[0:0]$102
Creating decoders for process `\gcd.$proc$gcdtest.sv:55$81'.
     1/3: $0\y[7:0]
     2/3: $0\x[7:0]
     3/3: $0\lsb[2:0]
Creating decoders for process `\gcdtest.$proc$gcdtest.sv:0$47'.
Creating decoders for process `\gcdtest.$proc$gcdtest.sv:0$45'.
Creating decoders for process `\gcdtest.$proc$gcdtest.sv:0$43'.
Creating decoders for process `\gcdtest.$proc$gcdtest.sv:235$18'.
     1/8: $0$formal$gcdtest.sv:237$1_EN[0:0]$20
     2/8: $0$formal$gcdtest.sv:237$1_CHECK[0:0]$19
     3/8: $0$formal$gcdtest.sv:241$2_EN[0:0]$22
     4/8: $0$formal$gcdtest.sv:241$2_CHECK[0:0]$21
     5/8: $0$formal$gcdtest.sv:245$3_EN[0:0]$24
     6/8: $0$formal$gcdtest.sv:245$3_CHECK[0:0]$23
     7/8: $0$formal$gcdtest.sv:249$4_EN[0:0]$26
     8/8: $0$formal$gcdtest.sv:249$4_CHECK[0:0]$25
Creating decoders for process `\gcdtest.$proc$gcdtest.sv:0$49'.

3.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ResetCounter.\count' using process `\ResetCounter.$proc$ResetCounter.sv:19$109'.
  created $dff cell `$procdff$168' with positive edge clock.
Creating register for signal `\ResetCounter.\flag' using process `\ResetCounter.$proc$ResetCounter.sv:19$109'.
  created $dff cell `$procdff$169' with positive edge clock.
Creating register for signal `\gcd.$formal$gcdtest.sv:151$51_CHECK' using process `\gcd.$proc$gcdtest.sv:149$101'.
  created $dff cell `$procdff$170' with positive edge clock.
Creating register for signal `\gcd.$formal$gcdtest.sv:151$51_EN' using process `\gcd.$proc$gcdtest.sv:149$101'.
  created $dff cell `$procdff$171' with positive edge clock.
Creating register for signal `\gcd.\lsb' using process `\gcd.$proc$gcdtest.sv:55$81'.
  created $dff cell `$procdff$172' with positive edge clock.
Creating register for signal `\gcd.\x' using process `\gcd.$proc$gcdtest.sv:55$81'.
  created $dff cell `$procdff$173' with positive edge clock.
Creating register for signal `\gcd.\y' using process `\gcd.$proc$gcdtest.sv:55$81'.
  created $dff cell `$procdff$174' with positive edge clock.
Creating register for signal `\gcd.\start' using process `\gcd.$proc$gcdtest.sv:55$81'.
  created $dff cell `$procdff$175' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:237$1_CHECK' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$176' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:237$1_EN' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$177' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:241$2_CHECK' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$178' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:241$2_EN' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$179' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:245$3_CHECK' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$180' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:245$3_EN' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$181' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:249$4_CHECK' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$182' with positive edge clock.
Creating register for signal `\gcdtest.$formal$gcdtest.sv:249$4_EN' using process `\gcdtest.$proc$gcdtest.sv:235$18'.
  created $dff cell `$procdff$183' with positive edge clock.

3.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ResetCounter.$proc$ResetCounter.sv:0$111'.
Found and cleaned up 2 empty switches in `\ResetCounter.$proc$ResetCounter.sv:19$109'.
Removing empty process `ResetCounter.$proc$ResetCounter.sv:19$109'.
Removing empty process `gcd.$proc$gcdtest.sv:0$107'.
Found and cleaned up 1 empty switch in `\gcd.$proc$gcdtest.sv:149$101'.
Removing empty process `gcd.$proc$gcdtest.sv:149$101'.
Found and cleaned up 12 empty switches in `\gcd.$proc$gcdtest.sv:55$81'.
Removing empty process `gcd.$proc$gcdtest.sv:55$81'.
Removing empty process `gcdtest.$proc$gcdtest.sv:0$47'.
Removing empty process `gcdtest.$proc$gcdtest.sv:0$45'.
Removing empty process `gcdtest.$proc$gcdtest.sv:0$43'.
Found and cleaned up 4 empty switches in `\gcdtest.$proc$gcdtest.sv:235$18'.
Removing empty process `gcdtest.$proc$gcdtest.sv:235$18'.
Removing empty process `gcdtest.$proc$gcdtest.sv:0$49'.
Cleaned up 19 empty switches.

3.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
<suppressed ~11 debug messages>
Optimizing module gcdtest.

3.4. Executing FUTURE pass.

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
Optimizing module gcdtest.

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcdtest..
Removed 11 unused cells and 84 unused wires.
<suppressed ~16 debug messages>

3.7. Executing CHECK pass (checking for obvious problems).
Checking module ResetCounter...
Checking module gcd...
Checking module gcdtest...
Found and reported 0 problems.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
Optimizing module gcdtest.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\gcd'.
<suppressed ~45 debug messages>
Finding identical cells in module `\gcdtest'.
<suppressed ~21 debug messages>
Removed a total of 22 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ResetCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$gcdtest.sv:43$73: \start -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \gcdtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ResetCounter.
  Optimizing cells in module \gcd.
  Optimizing cells in module \gcd.
  Optimizing cells in module \gcdtest.
Performed a total of 1 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcdtest'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcdtest..
Removed 0 unused cells and 26 unused wires.
<suppressed ~2 debug messages>

3.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
<suppressed ~1 debug messages>
Optimizing module gcdtest.

3.8.8. Rerunning OPT passes. (Maybe there is more to do..)

3.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ResetCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcdtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ResetCounter.
  Optimizing cells in module \gcd.
  Optimizing cells in module \gcdtest.
Performed a total of 0 changes.

3.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcdtest'.
Removed a total of 0 cells.

3.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcdtest..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
Optimizing module gcdtest.

3.8.14. Rerunning OPT passes. (Maybe there is more to do..)

3.8.15. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ResetCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcdtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.8.16. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ResetCounter.
  Optimizing cells in module \gcd.
  Optimizing cells in module \gcdtest.
Performed a total of 0 changes.

3.8.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcdtest'.
Removed a total of 0 cells.

3.8.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcdtest..

3.8.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
Optimizing module gcdtest.

3.8.20. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell ResetCounter.$add$ResetCounter.sv:24$110 ($add).
Removed top 7 bits (of 8) from port Y of cell gcd.$shr$gcdtest.sv:21$52 ($shr).
Removed top 7 bits (of 8) from port Y of cell gcd.$shr$gcdtest.sv:23$53 ($shr).
Removed top 2 bits (of 3) from port B of cell gcd.$add$gcdtest.sv:33$62 ($add).
Removed top 1 bits (of 2) from port A of cell gcd.$eq$gcdtest.sv:69$92 ($eq).
Removed top 1 bits (of 8) from wire gcd._x_T.
Removed top 1 bits (of 8) from wire gcd._y_T.
Removed top 1 bits (of 8) from wire gcd._y_T_1.
Removed top 31 bits (of 32) from port B of cell gcdtest.$eq$gcdtest.sv:168$5 ($eq).
Removed top 29 bits (of 32) from port B of cell gcdtest.$eq$gcdtest.sv:170$8 ($eq).
Removed top 4 bits (of 8) from port B of cell gcdtest.$eq$gcdtest.sv:238$31 ($eq).
Removed top 5 bits (of 8) from port B of cell gcdtest.$eq$gcdtest.sv:246$37 ($eq).

3.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcdtest..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.11. Executing MEMORY_COLLECT pass (generating $mem cells).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module gcd.
Optimizing module gcdtest.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcdtest'.
Removed a total of 0 cells.

3.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcdtest..

3.12.4. Finished fast OPT passes.

3.13. Printing statistics.

=== ResetCounter ===

   Number of wires:                 10
   Number of wire bits:            165
   Number of public wires:           6
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $add                            1
     $dff                            2
     $mux                            3

=== gcd ===

   Number of wires:                 62
   Number of wire bits:            278
   Number of public wires:          36
   Number of public wire bits:     188
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $add                            1
     $and                            2
     $assert                         1
     $dff                            6
     $eq                             4
     $logic_not                      3
     $lt                             1
     $mux                           22
     $not                            2
     $or                             4
     $shr                            2
     $sub                            2
     ResetCounter                    1

=== gcdtest ===

   Number of wires:                 32
   Number of wire bits:             70
   Number of public wires:          13
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $and                            4
     $assert                         4
     $dff                            6
     $eq                             4
     $mux                            6
     $not                            2
     ResetCounter                    1
     gcd                             1

=== design hierarchy ===

   gcdtest                           1
     ResetCounter                    1
     gcd                             1
       ResetCounter                  1

   Number of wires:                114
   Number of wire bits:            678
   Number of public wires:          61
   Number of public wire bits:     375
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 88
     $add                            3
     $and                            6
     $assert                         5
     $dff                           16
     $eq                             8
     $logic_not                      3
     $lt                             1
     $mux                           34
     $not                            4
     $or                             4
     $shr                            2
     $sub                            2

3.14. Executing CHECK pass (checking for obvious problems).
Checking module ResetCounter...
Checking module gcd...
Checking module gcdtest...
Found and reported 0 problems.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \gcdtest
Used module:     \gcd
Used module:         \ResetCounter

4.2. Analyzing design hierarchy..
Top module:  \gcdtest
Used module:     \gcd
Used module:         \ResetCounter
Removed 0 unused modules.
Module gcd directly or indirectly contains formal properties -> setting "keep" attribute.
Module gcdtest directly or indirectly contains formal properties -> setting "keep" attribute.

5. Executing jny backend.

6. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 61a627c5da, CPU: user 0.04s system 0.02s
Yosys 0.35+24 (git sha1 7eea04779, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 21% 6x opt_clean (0 sec), 20% 7x opt_expr (0 sec), ...
