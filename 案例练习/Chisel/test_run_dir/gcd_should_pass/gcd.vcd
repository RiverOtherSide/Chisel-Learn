$date
2023-11-16T15:02+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module gcd $end
 $var wire 1 ! assert_1 $end
 $var wire 1 " printf_1 $end
 $var wire 8 # diff $end
 $var wire 8 $ io_o $end
 $var wire 1 ' y_lsb $end
 $var wire 8 ( io_b $end
 $var wire 3 ) lsb $end
 $var wire 8 * y $end
 $var wire 1 + printf $end
 $var wire 1 - clock $end
 $var wire 8 . x $end
 $var wire 1 / io_done $end
 $var wire 8 1 io_a $end
 $var wire 1 2 assert $end
 $var wire 1 3 reset $end
 $var wire 1 4 x_lsb $end
 $var wire 1 5 resetCounter $end
 $var wire 1 6 start $end
  $scope module resetCounter $end
   $var wire 1 % clk $end
   $var wire 1 & reset $end
   $var wire 32 , timeSinceReset $end
   $var wire 1 0 notChaos $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
0%
04
b00000000 (
0&
05
0-
0'
b00000000 1
0/
b00000000 #
06
0!
00
b00000000 *
b00000000 $
0"
0+
b00000000000000000000000000000000 ,
02
b000 )
03
b00000000 .
$end
#0
13
1&
1/
#1
1-
1%
16
#6
03
0-
0%
b00011100 1
0&
b00001100 (
#11
1-
1%
b00011100 .
b00010000 #
b00001100 *
06
b00001100 $
0/
#16
0-
0%
#21
1-
1%
b001 )
#26
0-
0%
#31
1-
1%
14
1'
b010 )
#36
0-
0%
#41
1-
1%
04
b00001000 .
b00000100 #
b00001000 $
#46
0-
0%
#51
1-
1%
14
b00000100 .
b00001000 #
b00000100 $
#56
0-
0%
#61
1-
1%
b00000000 #
b00000100 *
1/
#66
0-
0%
#71
1-
1%
#76
0-
0%
#81
1-
1%
#86
0-
0%
#91
1-
1%
#96
0-
0%
#101
1-
1%
#106
0-
0%
b00000000 1
b00000000 (
